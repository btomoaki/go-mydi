// Code generated by MockGen. DO NOT EDIT.
// Source: render.go

// Package iface is a generated GoMock package.
package iface

import (
	render "github.com/gin-gonic/gin/render"
	gomock "github.com/golang/mock/gomock"
	template "html/template"
	reflect "reflect"
)

// MockRender is a mock of Render interface
type MockRender struct {
	ctrl     *gomock.Controller
	recorder *MockRenderMockRecorder
}

// MockRenderMockRecorder is the mock recorder for MockRender
type MockRenderMockRecorder struct {
	mock *MockRender
}

// NewMockRender creates a new mock instance
func NewMockRender(ctrl *gomock.Controller) *MockRender {
	mock := &MockRender{ctrl: ctrl}
	mock.recorder = &MockRenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRender) EXPECT() *MockRenderMockRecorder {
	return m.recorder
}

// AddFromFiles mocks base method
func (m *MockRender) AddFromFiles(arg0 string, arg1 ...string) *template.Template {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFromFiles", varargs...)
	ret0, _ := ret[0].(*template.Template)
	return ret0
}

// AddFromFiles indicates an expected call of AddFromFiles
func (mr *MockRenderMockRecorder) AddFromFiles(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFromFiles", reflect.TypeOf((*MockRender)(nil).AddFromFiles), varargs...)
}

// Instance mocks base method
func (m *MockRender) Instance(arg0 string, arg1 interface{}) render.Render {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instance", arg0, arg1)
	ret0, _ := ret[0].(render.Render)
	return ret0
}

// Instance indicates an expected call of Instance
func (mr *MockRenderMockRecorder) Instance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockRender)(nil).Instance), arg0, arg1)
}
